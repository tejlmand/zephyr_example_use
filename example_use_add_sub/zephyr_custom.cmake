
# This is just an example zephyr_custom.cmake file for the zephyr system to avoid the need of
# updating everything in Zephyr for this example.
#
# In order to show the principal of add_subdirectory in the example context, we need this file.
# This file would not be a correct use of zephyr in the end, only for proff of concept.
#
# This is just to be able to compile bluetooth as standalone lib when we don't build zephyr.
add_library(zephyr_interface INTERFACE)

target_include_directories(zephyr_interface INTERFACE 
    ${CMAKE_CURRENT_LIST_DIR}/include/generated
    ${CMAKE_CURRENT_LIST_DIR}/zephyr/subsys/bluetooth/controller/hal/nrf5/
    ${CMAKE_CURRENT_LIST_DIR}/zephyr/include
    ${CMAKE_CURRENT_LIST_DIR}/zephyr/subsys/bluetooth
    ${CMAKE_CURRENT_LIST_DIR}/zephyr/arch/arm/include
    ${CMAKE_CURRENT_LIST_DIR}/zephyr/include/arch/arm/cortex_m/
    ${CMAKE_CURRENT_LIST_DIR}/zephyr/arch/arm/soc/nordic_nrf/include/
    ${CMAKE_CURRENT_LIST_DIR}/zephyr/arch/arm/soc/nordic_nrf/nrf52/
    ${CMAKE_CURRENT_LIST_DIR}/zephyr/ext/hal/nordic/nrfx/mdk/
    ${CMAKE_CURRENT_LIST_DIR}/zephyr/ext/hal/cmsis/Include/
    ${CMAKE_CURRENT_LIST_DIR}/zephyr/include/drivers
)

# Taken from .config generated by KConfig.
# Just as reference.
target_compile_options(zephyr_interface INTERFACE 
   -imacros ${CMAKE_CURRENT_LIST_DIR}/include/autoconf.h 
)

# For this example use, we don't care for build zephyr completely.
add_library(zephyr  STATIC IMPORTED)
set_target_properties(zephyr PROPERTIES IMPORTED_LOCATION ${CMAKE_CURRENT_LIST_DIR}/zephyr/lib/libzephyr.a)
add_library(kernel  STATIC IMPORTED)
set_target_properties(kernel PROPERTIES IMPORTED_LOCATION ${CMAKE_CURRENT_LIST_DIR}/zephyr/lib/libkernel.a)
add_library(offsets STATIC IMPORTED)
set_target_properties(offsets PROPERTIES IMPORTED_LOCATION ${CMAKE_CURRENT_LIST_DIR}/zephyr/lib/liboffsets.a)
add_library(net STATIC IMPORTED)
set_target_properties(net PROPERTIES IMPORTED_LOCATION ${CMAKE_CURRENT_LIST_DIR}/zephyr/lib/libsubsys__net.a)
link_directories(${CMAKE_CURRENT_LIST_DIR}/lib)


# This is not the right place for circular referencing, in fact, the dependency tree should be made
# when defining the library, i.e. when oone know that bluetooth_host is a target, then the line:
# target_link_libraries(zephyr bluetooth_host)
# could be made to ensure libzephyr.a correctly links (if that is indeed needed)
# For example use, we just depend all libs on each other, even though it might not be needed.
target_link_libraries(offsets    INTERFACE         kernel zephyr net bluetooth_common 
                      "$<$<BOOL:${CONFIG_BT_HCI}>:bluetooth_host>" 
                      "$<$<BOOL:${CONFIG_BT_CTLR}>:bluetooth_controller>"
                      )
target_link_libraries(kernel     INTERFACE offsets        zephyr net bluetooth_common 
                      "$<$<BOOL:${CONFIG_BT_HCI}>:bluetooth_host>" 
                      "$<$<BOOL:${CONFIG_BT_CTLR}>:bluetooth_controller>"
                      )
target_link_libraries(zephyr     INTERFACE offsets kernel        net bluetooth_common 
                      "$<$<BOOL:${CONFIG_BT_HCI}>:bluetooth_host>" 
                      "$<$<BOOL:${CONFIG_BT_CTLR}>:bluetooth_controller>"
                      )
target_link_libraries(net        INTERFACE offsets kernel zephyr     bluetooth_common
                      "$<$<BOOL:${CONFIG_BT_HCI}>:bluetooth_host>" 
                      "$<$<BOOL:${CONFIG_BT_CTLR}>:bluetooth_controller>"
                      )

